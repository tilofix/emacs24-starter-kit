#+title:    My Library of Babel
#+author:     Tilo Wirkner 
#+STARTUP:  hideblocks

* Introduction

The Library of Babel is an extensible collection of ready-made and
easily-shortcut-callable source-code blocks for handling common tasks.

* Parse SNMP-Trap 

This library-of-babel function requires following cygwin packages installed
- ~python-pip~, 
- ~python-devel~ and 
- ~net-snmp-utils~ 
and following pip packages installed
- ~pysnmp~. 

SNMP PDU parsed from Example PPT Testcase

#+NAME: mlob-parse-snmp-trap-pdu 
#+BEGIN_SRC python :results output :var pdu_to_parse="307e0201 01040670 75626c69 63a77102 0406747c 48020100 02010030 63300f06 082b0601 02010103 00430309 1b7a301e 060a2b06 01060301 01040100 06102b06 01040181 67070102 02013e01 02043018 06132b06 01040181 67070102 02013e02 03010104 01020102 30160610 2b060104 01816707 01020201 020a0100 42025fd1"
  from pyasn1.codec.ber import encoder, decoder
  from pysnmp.proto import api

  import binascii

  pMod = api.protoModules[api.protoVersion2c]

  msg_to_parse = "".join(pdu_to_parse.split())

  wholeMsg = binascii.unhexlify(msg_to_parse)

  while wholeMsg:
      rspMsg, wholeMsg = decoder.decode(wholeMsg, asn1Spec=pMod.Message())
      rspPDU = pMod.apiMessage.getPDU(rspMsg)
      # Check for SNMP errors reported
      errorStatus = pMod.apiPDU.getErrorStatus(rspPDU)
      if errorStatus:
          print(errorStatus.prettyPrint())
      else:
          for oid, val in pMod.apiPDU.getVarBinds(rspPDU):
              print('%s = %s' % (oid.prettyPrint(), val.prettyPrint()))
#+END_SRC

#+RESULTS: mlob-parse-snmp-trap-pdu
: 1.3.6.1.2.1.1.3.0 = 596858
: 1.3.6.1.6.3.1.1.4.1.0 = 1.3.6.1.4.1.231.7.1.2.2.1.62.1.2.4
: 1.3.6.1.4.1.231.7.1.2.2.1.62.2.3.1.1.4.1 = 2
: 1.3.6.1.4.1.231.7.1.2.2.1.2.10.1.0 = 24529


snmpTrapOID of SNMP PDU parsed from Example PPT Testcase

#+NAME: mlob-get-snmp-trap-oid 
#+BEGIN_SRC python :results output :var pdu_to_parse="307e0201 01040670 75626c69 63a77102 0406747c 48020100 02010030 63300f06 082b0601 02010103 00430309 1b7a301e 060a2b06 01060301 01040100 06102b06 01040181 67070102 02013e01 02043018 06132b06 01040181 67070102 02013e02 03010104 01020102 30160610 2b060104 01816707 01020201 020a0100 42025fd1"
  from pyasn1.codec.ber import encoder, decoder
  from pysnmp.proto import api

  import binascii

  pMod = api.protoModules[api.protoVersion2c]

  msg_to_parse = "".join(pdu_to_parse.split())

  wholeMsg = binascii.unhexlify(msg_to_parse)
  snmpTrapOID = ".".join(("1.3.6.1.6.3.1.1.4.1","0"))
  snmpTrapOID_value = ""

  while wholeMsg:
      rspMsg, wholeMsg = decoder.decode(wholeMsg, asn1Spec=pMod.Message())
      rspPDU = pMod.apiMessage.getPDU(rspMsg)
      # Check for SNMP errors reported
      errorStatus = pMod.apiPDU.getErrorStatus(rspPDU)
      if errorStatus:
          print(errorStatus.prettyPrint())
      else:
          for oid, val in pMod.apiPDU.getVarBinds(rspPDU):
              if oid.prettyPrint() == snmpTrapOID: 
                  print('%s' % val.prettyPrint())
#+END_SRC

#+RESULTS: mlob-get-snmp-trap-oid
: 1.3.6.1.4.1.231.7.1.2.2.1.62.1.2.4


Result OID from TRAP-PDU resolved 

#+NAME: mlob-translate-oid-to-text
#+BEGIN_SRC sh :results: output :export both :var oid="1.3.6.1.4.1.231.7.1.2.2.1.4.1.5.2" mib="MIB561" 
  snmptranslate.exe -M ~/Documents/hiXIPv6/mibs/$mib/ -m 'ALL' -Ln -Tt $oid 
#+END_SRC

#+RESULTS: mlob-translate-oid-to-text
: SHE-BRIDGE-MIB::sheBridgePortCreated
* Generate MIB-Changes out of MIB-Announce E-Mail

Nick or now Norbert sends out an e-mail with a new MIB release and 
a table of mib tasks which is base for the python script to generate 
a list of MIB changes. 

The table requires following columns 

| Impacted MIB Item | Task ID | Revision Text | JIRA | Jira Title | Task Originator | Release |

#+NAME: create-list-of-mib-changes 
#+BEGIN_SRC python :results output :var mib_content=mib_hix_5503_content
  # -*- coding: utf-8 -*-
  """
  Python script to reformat tabular MIB changes into org-mode lists.
  """
  
  # There is no need to export table "mib_546_content" into a CSV file.
  # Org-Babel hands over org-mode table as python list in header arguments.
  
  # Remove first head lines from list.
  head_line = mib_content.pop(0)
  
  # Find changed MIB modules and remove doublicates.
  changed_mibs = list()
  for changed_mib in mib_content :
      changed_mibs.append(changed_mib[0])
  mib_changes = set(changed_mibs)
  
  # List all changes in order of MIB modules.
  for item in mib_changes :
     for mib_change in mib_content :
              if item in mib_change :
                  print '- %s' % item
                  ImpactedMib, TaskId, ReleaseNote, ChangeId, ChangeIdTitle, Stakeholder, PlannedRelease = mib_change
  #                  print '  - Impacted MIB: %s' % ImpactedMib
                  print '  - Task ID: %s' % TaskId
                  print '  - Release Note: %s' % ReleaseNote
                  print '  - Change ID: %s %s' % (ChangeId, ChangeIdTitle)
  #                print '  - Change ID: %s' % ChangeId
  #                print '  - ACI Effort: %s' % AciEffort
                  print '  - Stakeholder: %s' % Stakeholder
                  print '  - Planned Release: %s' % PlannedRelease
  
#+END_SRC

* Generate MIB-Changes out of JIRA-Query 

Nick or now Norbert sends out an e-mail with a new MIB release and 
maintain a [[http://confluence.adtran.com/display/SysEng/TARDIS+-+Broadband+Solutions+Dashboard][confluence dashboard]] a table of mib tasks assigned 
to a mib release which is an epic in JIRA. 

Unfortunately by chaning from SharePoint to JIRA we loose 
information of affected MIB-Module.

| Key | Summary | Description | Epic Link |

#+NAME: create-list-of-jira-mib-changes 
#+BEGIN_SRC python :results output :var mib_content=mib_hix_5604_content
  # -*- coding: utf-8 -*-
  """
  Python script to reformat tabular MIB changes into org-mode lists.
  """
  
  # There is no need to export table "mib_546_content" into a CSV file.
  # Org-Babel hands over org-mode table as python list in header arguments.
  
  # Remove first head lines from list.
  head_line = mib_content.pop(0)
  
  # Find changed MIB modules and remove doublicates.
  changed_mibs = list()
  for changed_mib in mib_content :
      changed_mibs.append(changed_mib[0])
  mib_changes = set(changed_mibs)
  
  # List all changes in order of MIB modules.
  for item in mib_changes :
     for mib_change in mib_content :
              if item in mib_change :
                  print( '- Task ID: %s' % item )
                  TaskId, Summary, Description, EpicLink = mib_change
                  print( '  - Summary: %s' % Summary )
                  print( '  - Description: %s' % Description )
                  print( '  - MIB-Release: %s' % EpicLink )
  
#+END_SRC

